{
   "wayOfWorking":{
      "overview":"Architecture includes looking at modularity, techical debt, observability and monitoring and user experience.",
      "qnum":"3",
      "title":"Architecture",
      "features":"<ul><li>Modularity</li><li>Technical Debt</li><li>Observability and Monitoring</li><li>User Experience</li></ul>",
      "1":"Significant technical debt and tightly coupled applications, resume driven development, evolutionary architect, user interfaces reflect requirements of underlying data structures, with no common mechanism for runtime observability. ",
      "1-summary":"<ul><li>Organsiation has limited visibility, or understanding, over significant aspects of production</li><li>High technical debt, little progress in reducing it</li><li>Ad-hoc logging/manual monitoring</li><li>UI reflects only the needs of the underlying datamodel / business process</li></ul>",
      "1-details":"<p>No clear definition of SDLC and no common understanding across teams involved throughout software delivery process</p><p>Changes are applied in situ and are not controlled by a version control system</p><p>Distributable packages are created manually on users' personal devices</p><p>All tests are performed manually</p><p>Adhoc approach to provisioning runtime environments, with various levels of consistency and control, and a lack of automation</p>",
      "2":"Layered architecture, but tightly coupled, with consideration for user experience. Tech debt recognised and considered as part of releases. Common approach observing application runtime behaviour. ",
      "2-summary":"<ul><li>Applications separate concerns</li><li> Components exhibit tight coupling</li><li> Technical debt recognised, starting to manage</li><li>Standardising logging of common operational metrics</li><li>Consideration is given to user experience by a UI specialist developer</li></ul>",
      "2-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>",
      "3":"Feature prioritisation relies on expert knowledge. <br>Loosely coupled architecture with known and measured runtime characteristics. <br>Technical debt actively managed.",
      "3-summary":"<ul><li>Applications are loosely coupled via APIs/messaging, or persistence schema</li><li>Technical debt being actively managed</li><li>Response to issues via predefined alerting thresholds</li><li>Product owner subjectively assume they know what experience and features the end users want</li></ul>",
      "3-details":"<p>Applications are loosely coupled via APIs or messaging, also loosely coupled around persistent data</p><p>Technical debt being actively managed</p><p>Reacting to isssues that are triggered by predefined alerting thresholds</p><p>Product owner subjectively assume they know what experience and features the end users want</p>",
      "4":"Research driven prioritisation. <br>Individual releasable components, but frequently blocked due to overall complexity.<br> Intrinsic recovery from failure. ",
      "4-summary":"<ul><li>Components are now small enough to be individually releasable</li><li>Low technical debt but still preventing true agility</li><li>Core capabilities include adapt and recover from failure</li><li>Product owner performs user research to determine UX and features to build</li></ul>",
      "4-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>Emergent modular architectures - components are now small enough to be individually releasable allowing small batches of work.Low technical debt but enough to prevent true agility</p><p>Core capabilities of the solution are able to adapt and recover from failure</p><p>Product owner performs user research to determine UX and features to build.",
      "5":"Highly observable, modular architecture that supports frequent independent component deployment, with low risk to service quality.",
      "5-summary":"<ul><li>Modular service architectures but with governance - lifecycle, security, orchestration and proliferation</li><li>True agility by aggressively removing technical debt</li><li>Pro-actively testing critical processes in production</li><li>Software is actively collecting usage data factored into continuous improvement</li></ul>",
      "5-details":"<p>Highly modular service architectures but with governance around lifecycle, security, orchestration and proliferation</p><p>Anything that interferes with agility is regarded as technical debt and actively removed as a matter of priority</p><p> Proactively testing in production including verifying potential failiure states</p><p>Software is actively collecting usage data and metrics which is being incorporated into future user experience </p>",
      "workshops":{
         "dev":[
            "Application Lifecycle Management",
            "Red Hat Navigate",
            "Microservices",
            "APIs",
            "Cloud Native Applications",
            "Agile Integration"
         ],
         "ops":[
            "IT Management",
            "Container Platform",
            "Cloud Management Discovery Session",
            "Enable Agility with Cloud Infrastructure -  Discovery Session",
            "Infrastructure Migration Solution (IMS)",
            "Red Hat Navigate",
            "Modernize virtualization infrastructure",
            "Software Defined Storage",
            "SAP Migration"
         ]
      },
      "Assessment":{
         "1":{
            "name":"Application Modularity",
            "part1":"Are you planning to refactor your applicaiton for increasing the modularity?",
            "part2":"Do you have issues in software delivery speed due to modularity?",
            "maturity":{
                "1":"Significant technical debt and tightly coupled applications, resume driven development, evolutionary architect, user interfaces reflect requirements of underlying data structures, with no common mechanism for runtime observability. ",
      "1-summary":"<ul><li>Organsiation has limited visibility, or understanding, over significant aspects of production</li><li>High technical debt, little progress in reducing it</li><li>Ad-hoc logging/manual monitoring</li><li>UI reflects only the needs of the underlying datamodel / business process</li></ul>",
      "1-details":"<p>No clear definition of SDLC and no common understanding across teams involved throughout software delivery process</p><p>Changes are applied in situ and are not controlled by a version control system</p><p>Distributable packages are created manually on users' personal devices</p><p>All tests are performed manually</p><p>Adhoc approach to provisioning runtime environments, with various levels of consistency and control, and a lack of automation</p>",
      "2":"Layered architecture, but tightly coupled, with consideration for user experience. Tech debt recognised and considered as part of releases. Common approach observing application runtime behaviour. ",
      "2-summary":"<ul><li>Applications separate concerns</li><li> Components exhibit tight coupling</li><li> Technical debt recognised, starting to manage</li><li>Standardising logging of common operational metrics</li><li>Consideration is given to user experience by a UI specialist developer</li></ul>",
      "2-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>",
      "3":"Feature prioritisation relies on expert knowledge. <br>Loosely coupled architecture with known and measured runtime characteristics. <br>Technical debt actively managed.",
      "3-summary":"<ul><li>Applications are loosely coupled via APIs/messaging, or persistence schema</li><li>Technical debt being actively managed</li><li>Response to issues via predefined alerting thresholds</li><li>Product owner subjectively assume they know what experience and features the end users want</li></ul>",
      "3-details":"<p>Applications are loosely coupled via APIs or messaging, also loosely coupled around persistent data</p><p>Technical debt being actively managed</p><p>Reacting to isssues that are triggered by predefined alerting thresholds</p><p>Product owner subjectively assume they know what experience and features the end users want</p>",
      "4":"Research driven prioritisation. <br>Individual releasable components, but frequently blocked due to overall complexity.<br> Intrinsic recovery from failure. ",
      "4-summary":"<ul><li>Components are now small enough to be individually releasable</li><li>Low technical debt but still preventing true agility</li><li>Core capabilities include adapt and recover from failure</li><li>Product owner performs user research to determine UX and features to build</li></ul>",
      "4-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>Emergent modular architectures - components are now small enough to be individually releasable allowing small batches of work.Low technical debt but enough to prevent true agility</p><p>Core capabilities of the solution are able to adapt and recover from failure</p><p>Product owner performs user research to determine UX and features to build.",
      "5":"Highly observable, modular architecture that supports frequent independent component deployment, with low risk to service quality.",
      "5-summary":"<ul><li>Modular service architectures but with governance - lifecycle, security, orchestration and proliferation</li><li>True agility by aggressively removing technical debt</li><li>Pro-actively testing critical processes in production</li><li>Software is actively collecting usage data factored into continuous improvement</li></ul>",
      "5-details":"<p>Highly modular service architectures but with governance around lifecycle, security, orchestration and proliferation</p><p>Anything that interferes with agility is regarded as technical debt and actively removed as a matter of priority</p><p> Proactively testing in production including verifying potential failiure states</p><p>Software is actively collecting usage data and metrics which is being incorporated into future user experience </p>"}
         },
         "2":{
            "name":"Technical Debt",
            "part1":"Are you planning to refactor your applicaiton for increasing the modularity?",
            "part2":"Do you have issues in software delivery speed due to modularity?",
            "maturity":{
                "1":"Significant technical debt and tightly coupled applications, resume driven development, evolutionary architect, user interfaces reflect requirements of underlying data structures, with no common mechanism for runtime observability. ",
      "1-summary":"<ul><li>Organsiation has limited visibility, or understanding, over significant aspects of production</li><li>High technical debt, little progress in reducing it</li><li>Ad-hoc logging/manual monitoring</li><li>UI reflects only the needs of the underlying datamodel / business process</li></ul>",
      "1-details":"<p>No clear definition of SDLC and no common understanding across teams involved throughout software delivery process</p><p>Changes are applied in situ and are not controlled by a version control system</p><p>Distributable packages are created manually on users' personal devices</p><p>All tests are performed manually</p><p>Adhoc approach to provisioning runtime environments, with various levels of consistency and control, and a lack of automation</p>",
      "2":"Layered architecture, but tightly coupled, with consideration for user experience. Tech debt recognised and considered as part of releases. Common approach observing application runtime behaviour. ",
      "2-summary":"<ul><li>Applications separate concerns</li><li> Components exhibit tight coupling</li><li> Technical debt recognised, starting to manage</li><li>Standardising logging of common operational metrics</li><li>Consideration is given to user experience by a UI specialist developer</li></ul>",
      "2-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>",
      "3":"Feature prioritisation relies on expert knowledge. <br>Loosely coupled architecture with known and measured runtime characteristics. <br>Technical debt actively managed.",
      "3-summary":"<ul><li>Applications are loosely coupled via APIs/messaging, or persistence schema</li><li>Technical debt being actively managed</li><li>Response to issues via predefined alerting thresholds</li><li>Product owner subjectively assume they know what experience and features the end users want</li></ul>",
      "3-details":"<p>Applications are loosely coupled via APIs or messaging, also loosely coupled around persistent data</p><p>Technical debt being actively managed</p><p>Reacting to isssues that are triggered by predefined alerting thresholds</p><p>Product owner subjectively assume they know what experience and features the end users want</p>",
      "4":"Research driven prioritisation. <br>Individual releasable components, but frequently blocked due to overall complexity.<br> Intrinsic recovery from failure. ",
      "4-summary":"<ul><li>Components are now small enough to be individually releasable</li><li>Low technical debt but still preventing true agility</li><li>Core capabilities include adapt and recover from failure</li><li>Product owner performs user research to determine UX and features to build</li></ul>",
      "4-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>Emergent modular architectures - components are now small enough to be individually releasable allowing small batches of work.Low technical debt but enough to prevent true agility</p><p>Core capabilities of the solution are able to adapt and recover from failure</p><p>Product owner performs user research to determine UX and features to build.",
      "5":"Highly observable, modular architecture that supports frequent independent component deployment, with low risk to service quality.",
      "5-summary":"<ul><li>Modular service architectures but with governance - lifecycle, security, orchestration and proliferation</li><li>True agility by aggressively removing technical debt</li><li>Pro-actively testing critical processes in production</li><li>Software is actively collecting usage data factored into continuous improvement</li></ul>",
      "5-details":"<p>Highly modular service architectures but with governance around lifecycle, security, orchestration and proliferation</p><p>Anything that interferes with agility is regarded as technical debt and actively removed as a matter of priority</p><p> Proactively testing in production including verifying potential failiure states</p><p>Software is actively collecting usage data and metrics which is being incorporated into future user experience </p>"}
         },
         "3":{
            "name":"User Experience",
            "part1":"Are you planning to refactor your applicaiton for increasing the modularity?",
            "part2":"Do you have issues in software delivery speed due to modularity?",
            "maturity":{
                "1":"Significant technical debt and tightly coupled applications, resume driven development, evolutionary architect, user interfaces reflect requirements of underlying data structures, with no common mechanism for runtime observability. ",
      "1-summary":"<ul><li>Organsiation has limited visibility, or understanding, over significant aspects of production</li><li>High technical debt, little progress in reducing it</li><li>Ad-hoc logging/manual monitoring</li><li>UI reflects only the needs of the underlying datamodel / business process</li></ul>",
      "1-details":"<p>No clear definition of SDLC and no common understanding across teams involved throughout software delivery process</p><p>Changes are applied in situ and are not controlled by a version control system</p><p>Distributable packages are created manually on users' personal devices</p><p>All tests are performed manually</p><p>Adhoc approach to provisioning runtime environments, with various levels of consistency and control, and a lack of automation</p>",
      "2":"Layered architecture, but tightly coupled, with consideration for user experience. Tech debt recognised and considered as part of releases. Common approach observing application runtime behaviour. ",
      "2-summary":"<ul><li>Applications separate concerns</li><li> Components exhibit tight coupling</li><li> Technical debt recognised, starting to manage</li><li>Standardising logging of common operational metrics</li><li>Consideration is given to user experience by a UI specialist developer</li></ul>",
      "2-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>",
      "3":"Feature prioritisation relies on expert knowledge. <br>Loosely coupled architecture with known and measured runtime characteristics. <br>Technical debt actively managed.",
      "3-summary":"<ul><li>Applications are loosely coupled via APIs/messaging, or persistence schema</li><li>Technical debt being actively managed</li><li>Response to issues via predefined alerting thresholds</li><li>Product owner subjectively assume they know what experience and features the end users want</li></ul>",
      "3-details":"<p>Applications are loosely coupled via APIs or messaging, also loosely coupled around persistent data</p><p>Technical debt being actively managed</p><p>Reacting to isssues that are triggered by predefined alerting thresholds</p><p>Product owner subjectively assume they know what experience and features the end users want</p>",
      "4":"Research driven prioritisation. <br>Individual releasable components, but frequently blocked due to overall complexity.<br> Intrinsic recovery from failure. ",
      "4-summary":"<ul><li>Components are now small enough to be individually releasable</li><li>Low technical debt but still preventing true agility</li><li>Core capabilities include adapt and recover from failure</li><li>Product owner performs user research to determine UX and features to build</li></ul>",
      "4-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>Emergent modular architectures - components are now small enough to be individually releasable allowing small batches of work.Low technical debt but enough to prevent true agility</p><p>Core capabilities of the solution are able to adapt and recover from failure</p><p>Product owner performs user research to determine UX and features to build.",
      "5":"Highly observable, modular architecture that supports frequent independent component deployment, with low risk to service quality.",
      "5-summary":"<ul><li>Modular service architectures but with governance - lifecycle, security, orchestration and proliferation</li><li>True agility by aggressively removing technical debt</li><li>Pro-actively testing critical processes in production</li><li>Software is actively collecting usage data factored into continuous improvement</li></ul>",
      "5-details":"<p>Highly modular service architectures but with governance around lifecycle, security, orchestration and proliferation</p><p>Anything that interferes with agility is regarded as technical debt and actively removed as a matter of priority</p><p> Proactively testing in production including verifying potential failiure states</p><p>Software is actively collecting usage data and metrics which is being incorporated into future user experience </p>"}
         },
         "4":{
            "name":"Observability and Monitoring",
            "part1":"Are you planning to refactor your applicaiton for increasing the modularity?",
            "part2":"Do you have issues in software delivery speed due to modularity?",
            "maturity":{
                "1":"Significant technical debt and tightly coupled applications, resume driven development, evolutionary architect, user interfaces reflect requirements of underlying data structures, with no common mechanism for runtime observability. ",
      "1-summary":"<ul><li>Organsiation has limited visibility, or understanding, over significant aspects of production</li><li>High technical debt, little progress in reducing it</li><li>Ad-hoc logging/manual monitoring</li><li>UI reflects only the needs of the underlying datamodel / business process</li></ul>",
      "1-details":"<p>No clear definition of SDLC and no common understanding across teams involved throughout software delivery process</p><p>Changes are applied in situ and are not controlled by a version control system</p><p>Distributable packages are created manually on users' personal devices</p><p>All tests are performed manually</p><p>Adhoc approach to provisioning runtime environments, with various levels of consistency and control, and a lack of automation</p>",
      "2":"Layered architecture, but tightly coupled, with consideration for user experience. Tech debt recognised and considered as part of releases. Common approach observing application runtime behaviour. ",
      "2-summary":"<ul><li>Applications separate concerns</li><li> Components exhibit tight coupling</li><li> Technical debt recognised, starting to manage</li><li>Standardising logging of common operational metrics</li><li>Consideration is given to user experience by a UI specialist developer</li></ul>",
      "2-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>",
      "3":"Feature prioritisation relies on expert knowledge. <br>Loosely coupled architecture with known and measured runtime characteristics. <br>Technical debt actively managed.",
      "3-summary":"<ul><li>Applications are loosely coupled via APIs/messaging, or persistence schema</li><li>Technical debt being actively managed</li><li>Response to issues via predefined alerting thresholds</li><li>Product owner subjectively assume they know what experience and features the end users want</li></ul>",
      "3-details":"<p>Applications are loosely coupled via APIs or messaging, also loosely coupled around persistent data</p><p>Technical debt being actively managed</p><p>Reacting to isssues that are triggered by predefined alerting thresholds</p><p>Product owner subjectively assume they know what experience and features the end users want</p>",
      "4":"Research driven prioritisation. <br>Individual releasable components, but frequently blocked due to overall complexity.<br> Intrinsic recovery from failure. ",
      "4-summary":"<ul><li>Components are now small enough to be individually releasable</li><li>Low technical debt but still preventing true agility</li><li>Core capabilities include adapt and recover from failure</li><li>Product owner performs user research to determine UX and features to build</li></ul>",
      "4-details":"<p>Clear and common shared understanding of SDLC stages, manual steps employed to promote changes between stages</p><p> Code, configuration, and associated build and packaging instructions are version controlled</p><p> Automated build process from version controlled changes, but may be reliant on special environmental configuration and libraries</p><p>Some automated testing, but largely focused on application behaviour and function, and not extending to hosting environments, and real-life operational scenarios</p><p>All SDLC promotion steps are performed manually, for example, development to testing, or staging to production</p><p> There are a number of scripts used to support SDLC promotion steps, they are generally not reusable and only work for a specific application </p>Emergent modular architectures - components are now small enough to be individually releasable allowing small batches of work.Low technical debt but enough to prevent true agility</p><p>Core capabilities of the solution are able to adapt and recover from failure</p><p>Product owner performs user research to determine UX and features to build.",
      "5":"Highly observable, modular architecture that supports frequent independent component deployment, with low risk to service quality.",
      "5-summary":"<ul><li>Modular service architectures but with governance - lifecycle, security, orchestration and proliferation</li><li>True agility by aggressively removing technical debt</li><li>Pro-actively testing critical processes in production</li><li>Software is actively collecting usage data factored into continuous improvement</li></ul>",
      "5-details":"<p>Highly modular service architectures but with governance around lifecycle, security, orchestration and proliferation</p><p>Anything that interferes with agility is regarded as technical debt and actively removed as a matter of priority</p><p> Proactively testing in production including verifying potential failiure states</p><p>Software is actively collecting usage data and metrics which is being incorporated into future user experience </p>"}
         }
      }
   }
}
